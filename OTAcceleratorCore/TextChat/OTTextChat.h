//
//  OTTextChat.h
//
//  Copyright Â© 2016 Tokbox, Inc. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "OTAcceleratorSession.h"
#import "OTTextMessage.h"

/**
 *  @typedef  TextChatViewEventSignal                  NS_ENUM for the signal generated by the text chat.
 *  @brief    this enum describes the types for event signals send by the text chat
 *  @constant TextChatViewEventSignalDidSendMessage    The component sent a message.
 *  @constant TextChatViewEventSignalDidReceiveMessage The component received a new message.
 *  @constant TextChatViewEventSignalDidConnect        A disconnect was requested and succeeded.
 *  @constant TextChatViewEventSignalDidDisconnect     A new connection was requested and succeeded.
 */
typedef NS_ENUM(NSUInteger, OTTextChatConnectionEventSignal) {
    OTTextChatConnectionEventSignalDidConnect = 0,
    OTTextChatConnectionEventSignalDidDisconnect,
    OTTextChatConnectionEventSignalConnectionCreated,
    OTTextChatConnectionEventSignalConnectionDestroyed
};

typedef NS_ENUM(NSUInteger, OTTextChatMessageEventSignal) {
    OTTextChatMessageEventSignalDidSendMessage = 0,
    OTTextChatMessageEventSignalDidReceiveMessage
};

@class OTTextChat;
@class OTTextChatViewController;

/**
 *  TextChatEventBlock type for the various connection signals.
 *
 *  @param signal       NS_ENUM send with one of the signal defined for TextChatEventSignal.
 *  @param connection   The connection created or destroyed.
 *  @param error        The error object indicating there is a problem when sending the signal.
 */
typedef void (^OTTextChatConnectionBlock)(OTTextChatConnectionEventSignal signal, OTConnection *connection, NSError *);

/**
 *  TextChatEventBlock type for the various text message signals.
 *
 *  @param signal       NS_ENUM send with one of the signal defined for TextChatEventSignal.
 *  @param textMessage  The current message sent or received.
 *  @param error        The error object indicating there is a problem when sending the signal.
 */
typedef void (^OTTextChatMessageBlock)(OTTextChatMessageEventSignal signal, OTTextMessage *textMessage, NSError *);

@protocol OTTextChatDataSource <NSObject>
- (OTAcceleratorSession *)sessionOfOTTextChat:(OTTextChat *)textChat;
@end

@interface OTTextChat : NSObject

/**
 *  The object that acts as the data source of the screen sharer.
 *
 *  The delegate must adopt the OTTextChatDataSource protocol. The delegate is not retained.
 */
@property (weak, nonatomic) id<OTTextChatDataSource> dataSource;

/**
 *  Initialize a new `OTTextChat` instsance.
 *
 *  @return A new `OTTextChat` instsance.
 */
- (instancetype)init;

/**
 *  Establishes a text chat connection with completion.
 *
 *  @param handler NS_ENUM for the various event signals.
 */
- (void)connectWithHandler:(OTTextChatConnectionBlock)handler
            messageHandler:(OTTextChatMessageBlock)messageHandler;

/**
 *  Stops a text chat connection.
 */
- (void)disconnect;

/**
 *  The alias of the sender client.
 */
@property (nonatomic) NSString *alias;

/**
 *  The connection object of the sender client.
 */
@property (readonly, nonatomic) OTConnection *selfConnection;

/**
 *  Conveniently broadcast a message with a given text.
 */
- (void)sendMessage:(NSString *)text;

/**
 *  Conveniently send a message with a given text to a given connection.
 */
- (void)sendMessage:(NSString *)text
       toConnection:(OTConnection *)connection;

/**
 *  Broadcast a message with a OTTextMessage object.
 */
- (void)sendCustomMessage:(OTTextMessage *)textMessage;

/**
 *  Send a message with a OTTextMessage object to a given connection.
 */
- (void)sendCustomMessage:(OTTextMessage *)textMessage
             toConnection:(OTConnection *)connection;

@end
